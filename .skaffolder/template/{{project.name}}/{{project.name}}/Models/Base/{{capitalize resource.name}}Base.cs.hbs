**** PROPERTIES SKAFFOLDER ****
{
"forEachObj": "resource",
"overwrite": true,
"_partials": [
{
    "name": "Id Attribute",
    "tagFrom": " // Id Start ",
    "tagTo": " // Id End ",
    "template": "\t\tprivate string _id;\n\t\t[JsonProperty(PropertyName = \"_id\")]\n\t\tpublic string Id\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\treturn _id;\n\t\t\t}\n\t\t\tset\n\t\t\t\t{\n\t\t\t\t\tSetValue(ref _id, value);\n\t\t\t\t}\n\t\t\t}\n\t\t"
}
]
}
**** END PROPERTIES SKAFFOLDER ****
using System;
using Newtonsoft.Json;
using {{project.name}}.ViewModels;

namespace {{project.name}}.Models.Base
{
    public class {{capitalize resource.name}}Base : BaseViewModel
    {
        // Id Start 
        
        // Id End 

        {{#each resource._entity._attrs}}{{#notEqual name "roles"}}
        private {{toCType type}} {{name}};
        [JsonProperty(PropertyName = "{{name}}")]
        public {{toCType type}} {{capitalize name}}
        {
            get
            {
                return {{name}}{{#equal type "Date"}}.ToLocalTime(){{/equal}};
            }
            set
            {
                SetValue(ref {{name}}, value);
            }
        }{{/notEqual}}{{/each}}
        {{#each resource._entity._attrs}}{{#equal ./../resource.name "User"}}{{#equal name "roles"}}
        private {{toCType type}}[] {{name}};
        [JsonProperty(PropertyName = "{{name}}")]
        public {{toCType type}}[] {{capitalize name}}
        {
            get
            {
                return {{name}};
            }
            set
            {
                SetValue(ref {{name}}, value);
            }
        }{{/equal}}{{/equal}}{{/each}}
        {{#each resource._entity._relations}}{{#equal ./../resource._entity._id _ent1._id}}
        private string{{#equal type "m:m"}}[]{{/equal}} {{lowercase name}};
        [JsonProperty(PropertyName = "{{name}}")]
        public string{{#equal type "m:m"}}[]{{/equal}} {{capitalize name}}
        {
            get
            {
                return {{lowercase name}};
            }
            set
            {
                SetValue(ref {{lowercase name}}, value);
            }
        }
        {{/equal}}{{/each}}
        {{#equal resource.name "User"}}
        private string token;
        [JsonProperty(PropertyName = "token")]
        public string Token
        {
            get
            {
                return token;
            }
            set
            {
                SetValue(ref token, value);
            }
        }
        {{/equal}}
    }
}