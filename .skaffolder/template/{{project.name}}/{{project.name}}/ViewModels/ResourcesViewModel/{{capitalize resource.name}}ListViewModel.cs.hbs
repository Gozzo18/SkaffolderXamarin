**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
using Rg.Plugins.Popup.Services;
using {{project.name}}.Extensions;
using {{project.name}}.Models;
using {{project.name}}.Support;
using {{project.name}}.Views;
using {{project.name}}.Views.Loading;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Input;
using Xamarin.Forms;

namespace {{project.name}}.ViewModels.ResourcesViewModel
{
    public class {{capitalize resource.name}}ListViewModel : BaseViewModel
    {
        #region Attributes and Properties
        private ObservableCollection<{{capitalize resource.name}}> _{{lowercase resource.name}}sList;
        //This collection main purpose is to store data from API request 
        public ObservableCollection<{{capitalize resource.name}}> {{capitalize resource.name}}sList
        {
            get
            {
                return _{{lowercase resource.name}}sList;
            }
            set
            {
                SetValue(ref _{{lowercase resource.name}}sList, value);
            }
        }

        private ObservableCollection<{{capitalize resource.name}}> _supportList;
        //This one instead is the ItemSource of the ListView. This allows to modify without any exceptions, the elements of the ListView.
        public ObservableCollection<{{capitalize resource.name}}> SupportList
        {
            get
            {
                return _supportList;
            }
            set
            {
                SetValue(ref _supportList, value);
            }
        }

        private bool _refreshing;
        public bool Refreshing
        {
            get
            {
                return _refreshing;
            }
            set
            {
                SetValue(ref _refreshing, value);
            }
        }

        private string _searchedWord;
        public string SearchedWord
        {
            get
            {
                return _searchedWord;
            }
            set
            {
                SetValue(ref _searchedWord, value);
            }
        }

        private bool _isBusy;
        public bool IsBusy
        {
            get
            {
                return _isBusy;
            }
            set
            {
                SetValue(ref _isBusy, value);
            }
        }

        private bool _isLoaded;
        public bool IsLoaded
        {
            get
            {
                return _isLoaded;
            }
            set
            {
                SetValue(ref _isLoaded, value);
            }
        }
        #endregion

        #region Commands
        public ICommand AddCommand { get; private set; }
        public ICommand RefreshCommand { get; private set; }
        public ICommand LoadDataCommand { get; private set; }
        public ICommand SearchCommand { get; private set; }

        public ICommand Edit{{capitalize resource.name}}Command
        {
            get
            {
                return new Command(async (e) =>
                {
                    var {{lowercase resource.name}} = (e as {{capitalize resource.name}});
                    var masterDetailPage = App.Current.MainPage as MasterDetailPage;
                    await masterDetailPage.Detail.Navigation.PushAsync(new {{capitalize resource.name}}EditLoadingView({{lowercase resource.name}}), false);
                });

            }
        }

        public ICommand Delete{{capitalize resource.name}}Command
        {
            get
            {
                return new Command(async (e) =>
                {
                    //Pop Up allert appear
                    await PopupNavigation.Instance.PushAsync(new ConfirmDeletePopUp());
                    MessagingCenter.Subscribe<ConfirmDeletePopUp, bool>(this, Events.ConfirmDelete, async (arg1, arg2) =>
                    {
                        //If Save button is tapped
                        if (arg2)
                        {
                            var {{lowercase resource.name}} = (e as {{capitalize resource.name}});
                            await App.{{lowercase resource.name}}Service.DELETE({{lowercase resource.name}}.Id);
                            await RefreshList();
                        }
                    });
                });
            }
        }
        #endregion

        public {{capitalize resource.name}}ListViewModel()
        {
            AddCommand = new Command(async vm => await AddNew{{capitalize resource.name}}());
            RefreshCommand = new Command(async vm => await RefreshList());
            LoadDataCommand = new Command<ObservableCollection<{{capitalize resource.name}}>>(async vm => await GetRequest());
            SearchCommand = new Command(SearchWord);
        }

        private async Task RefreshList()
        {
            Refreshing = true;
            {{capitalize resource.name}}sList = await App.{{lowercase resource.name}}Service.GETList();
            SupportList = new ObservableCollection<{{capitalize resource.name}}>({{capitalize resource.name}}sList);
            Refreshing = false;
        }

        private async Task AddNew{{capitalize resource.name}}()
        {
            var masterDetailPage = App.Current.MainPage as MasterDetailPage;
            {{#equal resource.name "User"}}await masterDetailPage.Detail.Navigation.PushAsync(new RegisterNewUser(),false);{{/equal}}
            {{#notEqual resource.name "User"}}await masterDetailPage.Detail.Navigation.PushAsync(new {{capitalize resource.name}}EditLoadingView(null), false);{{/notEqual}}
                                              
        }

        private async Task GetRequest()
        {
            //Set ActivityIndicator visible, hide the ListView
            IsBusy = true;
            IsLoaded = false;

            {{capitalize resource.name}}sList = await App.{{lowercase resource.name}}Service.GETList();
            SupportList = new ObservableCollection<{{capitalize resource.name}}>({{capitalize resource.name}}sList);

            //Once ListView finished loading, we stop ActivityIndicator and set visible again the ListView
            IsBusy = false;
            IsLoaded = true;
        }

        private void SearchWord()
        {
            //Capitalize first letter of SearcheWord
            if (SearchedWord.Length >= 1)
                SearchedWord = char.ToUpper(SearchedWord[0]) + SearchedWord.Substring(1);

            if (string.IsNullOrWhiteSpace(SearchedWord))
                SupportList = new ObservableCollection<{{capitalize resource.name}}>({{capitalize resource.name}}sList);
            else
            {
                //The filtering of elements is based on the elemnts id. In case you wish to change, just overwrite c.Id with c.YourField
                var tempRecords = {{capitalize resource.name}}sList.Where(c => c.Id.Contains(SearchedWord));
                SupportList = new ObservableCollection<{{capitalize resource.name}}>(tempRecords);
            }
        }
    }
}
