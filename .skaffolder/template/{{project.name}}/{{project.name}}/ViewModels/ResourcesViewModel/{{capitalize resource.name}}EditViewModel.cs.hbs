**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
using {{project.name}}.Models;
using {{project.name}}.Views;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows.Input;
using Xamarin.Forms;

namespace {{project.name}}.ViewModels.ResourcesViewModel
{
    public class {{capitalize resource.name}}EditViewModel : BaseViewModel
    {
        #region Attributes and Properties
        private string _id;
        public string Id
        {
            get
            {
                return _id;
            }
            set
            {
                SetValue(ref _id, value);
            } 
        }

        {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#notEqual type "Number"}}{{#isNull _enum}}
        private {{#toCType type}}{{/toCType}} _{{name}};
        public {{#toCType type}}{{/toCType}} {{capitalize name}}
        {
            get
            {
                return _{{name}};
            }
            set
            {
                SetValue(ref _{{name}}, value);
            }
        }{{/isNull}}{{/notEqual}}{{/notEqual}}{{/each}}

        {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#equal type "Number"}}{{#isNull _enum}}
        private string _{{name}};
        public string {{capitalize name}}
        {
            get
            {
                return _{{name}};
            }
            set
            {
                SetValue(ref _{{name}}, value);
            }
        }{{/isNull}}{{/equal}}{{/notEqual}}{{/each}}

        {{#each resource._entity._attrs}}{{#notNull _enum}}
        private {{type}} _{{lowercase name}};
        public {{type}} {{capitalize name}}
        {
            get
            {
                return _{{lowercase name}};
            }
            set
            {
                SetValue(ref _{{lowercase name}}, value);
            }
        }{{/notNull}}{{/each}}

        private bool _isPresent;
        //True = editing {{capitalize resource.name}}, False = creating new {{capitalize resource.name}}
        public bool IsPresent
        {
            get
            {
                return _isPresent;
            }
            set
            {
                SetValue(ref _isPresent, value);
            }
        }

        private string _errorMessage;
        public string ErrorMessage
        {
            get
            {
                return _errorMessage;
            }
            set
            {
                SetValue(ref _errorMessage, value);
            }
        }

        {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        private {{capitalize _ent2.name}} _{{lowercase _ent2.name}};
        public  {{capitalize _ent2.name}}  {{capitalize _ent2.name}}
        {
            get
            {
                return _{{lowercase _ent2.name}};
            }
            set
            {
                SetValue(ref _{{lowercase _ent2.name}}, value);
            }
        }
        
        private ObservableCollection<{{capitalize _ent2.name}}> _{{lowercase _ent2.name}}sAvailable;
        //This is the collection of {{capitalize _ent2.name}}s that can be inserted as {{lowercase _ent2.name}} for the {{lowercase resource.name}}
        public ObservableCollection<{{capitalize _ent2.name}}> {{capitalize _ent2.name}}sAvailable
        {
            get
            {
                return _{{lowercase _ent2.name}}sAvailable;
            }
            set
            {
                SetValue(ref _{{lowercase _ent2.name}}sAvailable, value);
            }
        }
        {{/equal}}{{/equal}}{{/each}}

        private {{capitalize resource.name}} _{{lowercase resource.name}};
        public {{capitalize resource.name}} {{capitalize resource.name}}
        {
            get
            {
                return _{{lowercase resource.name}};
            }
            set
            {
                SetValue(ref _{{lowercase resource.name}}, value);
            }
        }

        {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        private ObservableCollection<{{_ent2.name}}> _{{lowercase name}}Inserted;
        //This is the collection of {{lowercase _ent2.name}}s that are ALREADY inserted as {{name}} members for the {{lowercase resource.name}}
        public ObservableCollection<{{_ent2.name}}> {{capitalize name}}Inserted
        {
            get
            {
                return _{{lowercase name}}Inserted;
            }
            set
            {
                SetValue(ref _{{lowercase name}}Inserted, value);
            }
        }

        private ObservableCollection<{{_ent2.name}}> _{{lowercase name}}Available;
        //This is the collection of {{lowercase _ent2.name}}s that CAN BE inserted as {{name}} members for the {{lowercase ent_1.name}}
        public ObservableCollection<{{_ent2.name}}> {{capitalize name}}Available
        {
            get
            {
                return _{{lowercase name}}Available;
            }
            set
            {
                SetValue(ref _{{lowercase name}}Available, value);
            }
        }{{/equal}}{{/equal}}{{/each}}
        #endregion

        #region Commands
        public ICommand BackCommand { get; private set; }
        public ICommand SaveCommand { get; private set; }
        {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#isNull _enum}}
        public ICommand {{capitalize name}}CompletedCommand { get; private set; }
        {{/isNull}}{{/notEqual}}{{/each}}
        {{#each resource._entity._attrs}}{{#notNull _enum}}
        public ICommand Selected{{capitalize name}}Command { get; private set; }
        {{/notNull}}{{/each}}
        {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        public ICommand Selected{{_ent2.name}}Command { get; private set; }
        {{/equal}}{{/equal}}{{/each}}

        {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        public ICommand SetDataForEditingCommand { get; private set; }
        public ICommand Selected{{capitalize name}}Command { get; private set; }
        public ICommand DeleteItemCommand
        {
            get
            {
                return new Command((e) =>
                {
                    var item = (e as {{capitalize _ent2.name}});
                    int i = 0 ;
                    bool found = false;
                    while (i <{{capitalize name}}Inserted.Count && !found)
                    {
                        if (item.Id.Equals({{capitalize name}}Inserted[i].Id))
                        {
                            {{capitalize name}}Available.Add({{capitalize name}}Inserted[i]);
                            {{capitalize name}}Inserted.RemoveAt({{capitalize name}}Inserted.IndexOf({{capitalize name}}Inserted[i]));
                            found = true;
                        }
                        i++;
                    }
                });
            }
        }{{/equal}}{{/equal}}{{/each}}
        #endregion

        public {{capitalize resource.name}}EditViewModel({{capitalize resource.name}} {{lowercase resource.name}}ToEdit{{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}, ObservableCollection<{{_ent2.name}}> {{lowercase _ent2.name}}s{{/equal}}{{/equal}}{{/each}})
        {
            {{capitalize resource.name}} = {{lowercase resource.name}}ToEdit;
            {{#each resource._entity._relations}}{{#notEqual ./../resource._entity._id _ent1._id}}
            if({{capitalize ./../resource.name}} != null)
            {
                {{#each ./../resource._entity._attrs}}
                {{capitalize name}} = {{capitalize ./../../resource.name}}.{{capitalize name}};
                {{/each}}
                IsPresent = true;
            }
            {{/notEqual}}{{/each}}

            {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
            //Remove from {{lowercase _ent2.name}}s all the elements that are null
            if({{lowercase _ent2.name}}s != null){
                for(int i = 0; i<{{lowercase _ent2.name}}s.Count; i++)
                {
                    if ({{lowercase _ent2.name}}s[i] == null)
                    {
                        {{lowercase _ent2.name}}s.RemoveAt(i);
                        i--;
                    }
                }
            }
            {{capitalize name}}Inserted = {{lowercase _ent2.name}}s;
            SetDataForEditingCommand = new Command(async vm => await SetData());
            Selected{{capitalize name}}Command = new Command<Picker>(vm =>{{capitalize _ent2.name}}Completed(vm));{{/equal}}{{/equal}}{{/each}}
            SaveCommand = new Command(async vm => await Save{{capitalize resource.name}}Data());
            BackCommand = new Command(async vm => await GoBack());
            {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#notEqual type "Date"}}{{#isNull _enum}}
            {{capitalize name}}CompletedCommand = new Command<Entry>(vm => {{capitalize name}}EntryCompleted(vm));
            {{/isNull}}{{/notEqual}}{{/notEqual}}{{/each}}
            {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#equal type "Date"}}{{#isNull _enum}}
            {{capitalize name}}CompletedCommand = new Command<DateTime>(vm => {{capitalize name}}PickerSelected(vm));
            {{/isNull}}{{/equal}}{{/notEqual}}{{/each}}
            {{#each resource._entity._attrs}}{{#notNull _enum}}
            Selected{{capitalize name}}Command = new Command<Picker>(vm => {{capitalize name}}Completed(vm));
            {{/notNull}}{{/each}}
            {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
            Selected{{_ent2.name}}Command = new Command<Picker>(vm => {{_ent2.name}}Completed(vm));
            {{/equal}}{{/equal}}{{/each}}
        }
        {{#equal resource._entity._relations.0.type "m:m"}}{{#equal resource._entity._id resource._entity._relations.0._ent1._id}}
        private async Task SetData()
        {
            {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
            {{capitalize name}}Available = await App.{{lowercase _ent2.name}}Service.GETList();
            {{/equal}}{{/equal}}{{/each}}
            
            {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
            {{_ent2.name}}sAvailable = await App.{{lowercase _ent2.name}}Service.GETList();
            {{/equal}}{{/equal}}{{/each}}

            if ({{capitalize resource.name}} != null)
            {
                //Overwrite entries
                Id = {{capitalize resource.name}}.Id;
                {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#notEqual type "Number"}}{{#isNull _enum}}
                {{capitalize name}} = {{capitalize ./../resource.name}}.{{capitalize name}};
                {{/isNull}}{{/notEqual}}{{/notEqual}}{{/each}}

                {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#equal type "Number"}}{{#isNull _enum}}
                {{capitalize name}} = {{capitalize ./../resource.name}}.{{capitalize name}}.ToString();
                {{/isNull}}{{/equal}}{{/notEqual}}{{/each}}

                {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#notNull _enum}}
                {{capitalize name}} = {{capitalize ./../resource.name}}.{{capitalize name}};
                {{/notNull}}{{/notEqual}}{{/each}}
            

                {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
                //Overwrite {{_ent2.name}} entry 
                for (int i = 0; i < {{capitalize _ent2.name}}sAvailable.Count; i++)
                {
                    if ({{capitalize _ent2.name}}sAvailable[i].Id.Equals({{./../resource.name}}.{{capitalize _ent2.name}}))
                    {
                        {{capitalize _ent2.name}} = {{capitalize _ent2.name}}sAvailable[i];
                    }
                }{{/equal}}{{/equal}}{{/each}}

                {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
                //Remove from {{capitalize name}}Available all the {{_ent2.name}} which are already inserted
                for (int k = 0; k < {{capitalize name}}Available.Count; k++)
                {
                    for (int h = 0; h <{{capitalize name}}Inserted.Count; h++)
                    {
                        if({{capitalize name}}Available.Count != 0)
                        {
                            if ({{capitalize name}}Inserted[h].Id.Equals({{capitalize name}}Available[k].Id))
                            {
                                {{capitalize name}}Available.Remove({{capitalize name}}Available[k]);
                                k = 0;
                                h = -1;
                            }
                        }
                    }
                }{{/equal}}{{/equal}}{{/each}}
                IsPresent = true;
            }
            else
            {
                {{capitalize resource.name}} = new {{capitalize resource.name}}();
                 {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
                {{capitalize name}}Inserted = new ObservableCollection<{{capitalize _ent2.name}}>();
                {{/equal}}{{/equal}}{{/each}}
            }
                
        }{{/equal}}{{/equal}}

        {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#notEqual type "Date"}}{{#isNull _enum}}
        private void {{capitalize name}}EntryCompleted(Entry {{capitalize ./../resource.name}}{{capitalize name}})
        {
            {{capitalize name}} = {{capitalize ./../resource.name}}{{capitalize name}}.Text;
        }{{/isNull}}{{/notEqual}}{{/notEqual}}{{/each}}

        {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#equal type "Date"}}{{#isNull _enum}}
        private void {{capitalize name}}PickerSelected(DateTime {{capitalize ./../resource.name}}{{capitalize name}})
        {
            {{capitalize name}} = {{capitalize ./../resource.name}}{{capitalize name}};
        }{{/isNull}}{{/equal}}{{/notEqual}}{{/each}}

        {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#notNull _enum}}
        private void {{capitalize name}}Completed(Picker picker)
        {
            {{capitalize name}} = (string)picker.SelectedItem;
        }{{/notNull}}{{/notEqual}}{{/each}}

        {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        private void {{capitalize _ent2.name}}Completed(Picker picker)
        {
           {{capitalize _ent2.name}} {{lowercase _ent2.name}}Selected = ({{capitalize _ent2.name}})picker.SelectedItem;
            if ({{lowercase _ent2.name}}Selected != null)
            {
                {{capitalize name}}Inserted.Add({{lowercase _ent2.name}}Selected);
                bool found = false;
                int iterator = 0;
                while(iterator < {{capitalize name}}Available.Count && !found)
                {
                    if ({{lowercase _ent2.name}}Selected.Id.Equals({{capitalize name}}Available[iterator].Id))
                    {
                        found = true;
                    }
                    iterator++;
                }

                //DO NOT TOUCH
                //This allows to modify the ItemSource of the Picker dynamically where actors can be selected
                ObservableCollection<{{capitalize _ent2.name}}> support = new ObservableCollection<{{capitalize _ent2.name}}>({{capitalize name}}Available);
                support.RemoveAt(iterator-1);
                {{capitalize name}}Available = support;
            }            
        }{{/equal}}{{/equal}}{{/each}}

        {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        private void {{capitalize _ent2.name}}Completed(Picker picker)
        {
            {{capitalize _ent2.name}} = ({{capitalize _ent2.name}})picker.SelectedItem;
        }{{/equal}}{{/equal}}{{/each}}

        private async Task GoBack()
        {
            var masterDetailPage = App.Current.MainPage as MasterDetailPage;
            await masterDetailPage.Detail.Navigation.PopAsync();    
            
        }

        private async Task Save{{capitalize resource.name}}Data()
        {
            {{resource.name}} {{lowercase resource.name}} = new {{resource.name}}();

            {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#notEqual type "Number"}}{{#isNull _enum}}
                {{lowercase ./../resource.name}}.{{capitalize name}} = {{capitalize name}};
            {{/isNull}}{{/notEqual}}{{/notEqual}}{{/each}}
            {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#equal type "Number"}}{{#isNull _enum}}
                {{lowercase ./../resource.name}}.{{capitalize name}} = Int32.Parse({{capitalize name}});
            {{/isNull}}{{/equal}}{{/notEqual}}{{/each}}
            {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#notNull _enum}}
                {{lowercase ./../resource.name}}.{{capitalize name}} = {{capitalize name}};
            {{/notNull}}{{/notEqual}}{{/each}}

            {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
                List<string> supportList = new List<string>();
                foreach ({{capitalize _ent2.name}} a in {{capitalize name}}Inserted)
                    supportList.Add(a.Id);
                {{lowercase ./../resource.name}}.Cast = supportList.ToArray();
            {{/equal}}{{/equal}}{{/each}}
            {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
                {{lowercase ./../resource.name}}.{{capitalize _ent2.name}} = {{capitalize _ent2.name}}.Id;
            {{/equal}}{{/equal}}{{/each}}
                if (IsPresent)
                {
                    {{lowercase resource.name}}.Id = {{capitalize resource.name}}.Id;
                    await App.{{lowercase resource.name}}Service.PUT({{lowercase resource.name}});
                }
                else
                    await App.{{lowercase resource.name}}Service.POST({{lowercase resource.name}});

                var masterDetailPage = App.Current.MainPage as MasterDetailPage;
                await masterDetailPage.Detail.Navigation.PopAsync();   
        }
    }
}
