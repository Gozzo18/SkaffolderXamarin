using SkaffolderTemplate.Models;
using SkaffolderTemplate.ViewModels.ResourcesViewModel;
using System;
using System.Collections.ObjectModel;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace SkaffolderTemplate.Views
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class {{capitalize crudResource.name}}Edit : ContentPage
    {
        //Set ViewModel for BindingContext
        private {{capitalize crudResource.name}}EditViewModel ViewModel
        {
            get
            {
                return BindingContext as {{capitalize crudResource.name}}EditViewModel;
            }
            set
            {
                BindingContext = value;
            }
        }

        public {{capitalize crudResource.name}}Edit ({{capitalize crudResource.name}} {{lowercase crudResource.name}}{{#each crudResource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../crudResource._entity._id _ent1._id}}, ObservableCollection<{{_ent2.name}}> {{lowercase _ent2.name}}s{{/equal}}{{/equal}}{{/each}})
		{
            //Setting BindingContext
            ViewModel = new {{capitalize crudResource.name}}EditViewModel({{lowercase crudResource.name}}{{#each crudResource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../crudResource._entity._id _ent1._id}}, {{lowercase _ent2.name}}s{{/equal}}{{/equal}}{{/each}});
			InitializeComponent ();
        }

        protected override void OnAppearing()
        {
            //Remove from navigation stack the LoadingView
            this.Navigation.RemovePage(this.Navigation.NavigationStack[this.Navigation.NavigationStack.Count - 2 ]);

            base.OnAppearing();
            {{#each crudResource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../crudResource._entity._id _ent1._id}}
            //Set the ItemSource for all the Pickers
            ViewModel.SetDataForEditingCommand.Execute(null);{{/equal}}{{/equal}}{{/each}}
        }

        {{#each crudResource._entity._attrs}}{{#notEqual name "password"}}{{#notEqual type "Date"}}{{#isNull _enum}}
        private void {{capitalize name}}Entry_Unfocused(object sender, FocusEventArgs e)
        {
            ViewModel.{{capitalize name}}CompletedCommand.Execute(sender as Entry);
        }{{/isNull}}{{/notEqual}}{{/notEqual}}{{/each}}

        {{#each crudResource._entity._attrs}}{{#notEqual name "password"}}{{#equal type "Date"}}{{#isNull _enum}}
        private void {{capitalize name}}_Selected(object sender, DateChangedEventArgs e)
        {
            ViewModel.{{capitalize name}}CompletedCommand.Execute(e.NewDate);
        }
        {{/isNull}}{{/equal}}{{/notEqual}}{{/each}}
        {{#each crudResource._entity._attrs}}{{#notNull _enum}}
        private void Picker{{capitalize name}}_SelectedIndexChanged(object sender, EventArgs e)
        {
            ViewModel.Selected{{capitalize name}}Command.Execute(sender as Picker);
        }{{/notNull}}{{/each}}

        {{#each crudResource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../crudResource._entity._id _ent1._id}}
        private void Picker{{_ent2.name}}_SelectedIndexChanged(object sender, EventArgs e)
        {
             ViewModel.Selected{{_ent2.name}}Command.Execute(sender as Picker); 
        }{{/equal}}{{/equal}}{{/each}}

        {{#each crudResource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../crudResource._entity._id _ent1._id}}
        private void Picker{{capitalize name}}_SelectedIndexChanged(object sender, EventArgs e)
        {
                ViewModel.Selected{{capitalize name}}Command.Execute(sender as Picker);
        }

        private void show{{capitalize name}}Picker(object sender, EventArgs e)
        {
            {{lowercase name}}Picker.Focus();
        }

        //Hide graphic effect on ListView
        private void {{lowercase name}}Inserted_ItemSelected(object sender, SelectedItemChangedEventArgs e)
        {
            if (e.SelectedItem == null)
                return;
            ((ListView)sender).SelectedItem = null;
        }{{/equal}}{{/equal}}{{/each}}
    }
}