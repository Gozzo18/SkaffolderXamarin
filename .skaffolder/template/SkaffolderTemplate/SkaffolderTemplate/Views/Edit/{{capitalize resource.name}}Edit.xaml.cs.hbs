**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
using SkaffolderTemplate.Models;
using SkaffolderTemplate.ViewModels;
using System;
using System.Collections.ObjectModel;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace SkaffolderTemplate.Views.Edit
{
    [XamlCompilation(XamlCompilationOptions.Compile)]
    public partial class {{capitalize resource.name}}Edit : ContentPage
    {
        //Set ViewModel for BindingContext
        private {{capitalize resource.name}}EditViewModel ViewModel
        {
            get
            {
                return BindingContext as {{capitalize resource.name}}EditViewModel;
            }
            set
            {
                BindingContext = value;
            }
        }

        public {{capitalize resource.name}}Edit ({{capitalize resource.name}} {{lowercase resource.name}}{{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}, ObservableCollection<{{_ent2.name}}> {{lowercase _ent2.name}}s{{/equal}}{{/equal}}{{/each}})
		{
            //Setting BindingContext
            ViewModel = new FilmEditViewModel({{lowercase resource.name}}{{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}, {{lowercase _ent2.name}}s{{/equal}}{{/equal}}{{/each}});
			InitializeComponent ();
        }

        {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        protected override void OnAppearing()
        {
            //Remove from navigation stack the LoadingView
            this.Navigation.RemovePage(this.Navigation.NavigationStack[this.Navigation.NavigationStack.Count - 2 ]);

            base.OnAppearing();
            //Set the ItemSource for all the Pickers
            ViewModel.SetPickersItemSourceCommand.Execute(null);
        }{{/equal}}{{/equal}}{{/each}}

        {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#isNull _enum}}
        private void {{capitalize name}}Entry_Unfocused(object sender, FocusEventArgs e)
        {
            ViewModel.{{capitalize name}}CompletedCommand.Execute(sender as Entry);
        }{{/isNull}}{{/notEqual}}{{/each}}

        {{#each resource._entity._attrs}}{{#notNull _enum}}
        private void Picker{{capitalize name}}_SelectedIndexChanged(object sender, EventArgs e)
        {
            ViewModel.Selected{{capitalize name}}Command.Execute(sender as Picker);
        }{{/notNull}}{{/each}}

        {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        private void Picker{{_ent2.name}}_SelectedIndexChanged(object sender, EventArgs e)
        {
             ViewModel.Selected{{_ent2.name}}Command.Execute(sender as Picker); 
        }{{/equal}}{{/equal}}{{/each}}

        {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
        private void Picker{{capitalize name}}_SelectedIndexChanged(object sender, EventArgs e)
        {
                ViewModel.Selected{{capitalize name}}Command.Execute(sender as Picker);
        }

        private void show{{capitalize name}}Picker(object sender, EventArgs e)
        {
            {{lowercase name}}Picker.Focus();
        }

        //Hide graphic effect on ListView
        private void {{lowercase name}}Inserted_ItemSelected(object sender, SelectedItemChangedEventArgs e)
        {
            if (e.SelectedItem == null)
                return;
            ((ListView)sender).SelectedItem = null;
        }{{/equal}}{{/equal}}{{/each}}
    }
}