**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             xmlns:customrenderer="clr-namespace:SkaffolderTemplate.CustomRenderer"
             x:Class="SkaffolderTemplate.Views.Edit.{{capitalize resource.name}}Edit"
             Title="{{capitalize resource.name}}">
    <ContentPage.Resources>
        <ResourceDictionary>
            <Style x:Key="label" TargetType="Label">
                <Setter Property="Margin" Value="0,-3,0,0"/>
            </Style>
            <Style x:Key="entry" TargetType="Entry">
                <Setter Property="PlaceholderColor" Value="White"/>
                <Setter Property="TextColor" Value="White"/>
                <Setter Property="Keyboard" Value="Text"/>
                <Setter Property="Margin" Value="0,-6,0,0"/>
            </Style>
        </ResourceDictionary>
    </ContentPage.Resources>
    <ContentPage.Content>
        <RelativeLayout>
            <Label x:Name="Subtitle" Text="Edit {{capitalize resource.name}}" FontSize="Large" TextColor="#7970F5"
                   RelativeLayout.XConstraint="{ConstraintExpression
                        Type=RelativeToParent,
                        Property=Width,
                        Factor=0.35}"
                   RelativeLayout.WidthConstraint="{ConstraintExpression
                        Type=RelativeToParent,
                        Property=Width,
                        Factor=1}"/>
            <Frame  x:Name="Data" BackgroundColor="#7970F5" CornerRadius="10"
                    RelativeLayout.YConstraint="{ConstraintExpression
                        Type=RelativeToView,
                        Property=Height,
                        ElementName=Subtitle,
                        Factor=1,
                        Constant=10}"
                    RelativeLayout.XConstraint="{ConstraintExpression
                        Type=RelativeToParent,
                        Property=Width,
                        Factor=0.1}"
                    RelativeLayout.WidthConstraint="{ConstraintExpression
                        Type=RelativeToParent,
                        Property=Width,
                        Factor=0.8}"
                    RelativeLayout.HeightConstraint="{ConstraintExpression
                        Type=RelativeToParent,
                        Property=Height,
                        Factor=0.8}">
                <StackLayout>
                    <ListView CachingStrategy="RecycleElement" {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}x:Name="{{name}}Inserted" ItemsSource="{Binding {{name}}Inserted}" ItemSelected="{{name}}Inserted_ItemSelected"{{/equal}}{{/equal}}{{/each}} RowHeight="10" HeightRequest="220" HasUnevenRows="True" SeparatorVisibility="None">
                        <ListView.Header>
                            <StackLayout VerticalOptions="FillAndExpand"> 
                                {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}<Picker x:Name="{{name}}Picker" IsVisible="False" ItemsSource="{Binding {{name}}Available}" ItemDisplayBinding="{Binding Id}" SelectedIndexChanged="Picker{{capitalize name}}_SelectedIndexChanged"/>{{/equal}}{{/equal}}{{/each}}                                
                                {{#each resource._entity._attrs}}{{#notNull _enum}}
                                <Label Text="{{capitalize name}}" Margin="3,0,0,0"/>
                                <Picker Title="{{capitalize name}}" TextColor="White" FontSize="Small" SelectedItem="{Binding {{capitalize name}} }" SelectedIndexChanged="Picker{{capitalize name}}_SelectedIndexChanged" Margin="0,-6,0,0">
                                    <Picker.ItemsSource>
                                        <x:Array Type="{x:Type x:{{type}} }">
                                            {{#each _enum}}
                                            <x:{{./../type}}>{{name}}</x:{{./../type}}>
                                            {{/each}}
                                        </x:Array>
                                    </Picker.ItemsSource>
                                </Picker>{{/notNull}}{{/each}}
                                {{#each resource._entity._attrs}}{{#notEqual name "password"}}{{#isNull _enum}}
                                <Label Text="{{capitalize name}}" Margin="3,0,0,0"/>
                                <Entry Placeholder="{{capitalize name}}" PlaceholderColor="White" FontSize="Small" Text="{Binding {{capitalize name}} }" TextColor="White" Unfocused="{{capitalize name}}Entry_Unfocused" {{#equal type "Date"}}Keyboard="Numeric"{{/equal}} Margin="0,-6,0,0"/>
                                {{/isNull}}{{/notEqual}}{{/each}}
                                {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
                                <StackLayout Orientation="Horizontal" HorizontalOptions="StartAndExpand" VerticalOptions="Start" Margin="0,-5,0,0">
                                    <Label Text="{{capitalize name}}" VerticalOptions="Center" FontSize="Medium">
                                        <Label.GestureRecognizers>
                                            <TapGestureRecognizer Tapped="show{{capitalize name}}Picker"/>
                                        </Label.GestureRecognizers>
                                    </Label>
                                    <Image Source="add.png" VerticalOptions="End" WidthRequest="35" HeightRequest="35">
                                        <Image.GestureRecognizers>
                                            <TapGestureRecognizer Tapped="show{{capitalize name}}Picker"/>
                                        </Image.GestureRecognizers>
                                    </Image>
                                </StackLayout>
                                {{/equal}}{{/equal}}{{/each}}
                            </StackLayout>
                        </ListView.Header>
                         {{#each resource._entity._relations}}{{#equal type "m:m"}}{{#equal ./../resource._entity._id _ent1._id}}
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <customrenderer:CustomViewCell>
                                    <StackLayout x:Name="Item" Orientation="Horizontal" Margin="0,-10,0,0">
                                        <Button Image="delete.png" BackgroundColor="Transparent" WidthRequest="30" BindingContext="{Binding Source={x:Reference castInserted}, Path=BindingContext}" Command="{Binding DeleteItemCommand}" CommandParameter="{Binding Source={x:Reference Item}, Path=BindingContext}"/>
                                        <Label Text="{Binding Id}" TextColor="White" VerticalOptions="Center"/>
                                    </StackLayout>
                                </customrenderer:CustomViewCell>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                        {{/equal}}{{/equal}}{{/each}}
                        <ListView.Footer>
                            <StackLayout>
                                {{#each resource._entity._relations}}{{#equal type "1:m"}}{{#equal ./../resource._entity._id _ent1._id}}
                                <Label Text="{{_ent2.name}}" Margin="12,0,0,0"/>
                                <Picker Title="{{_ent2.name}}" TextColor="White" FontSize="Small" ItemsSource="{Binding {{_ent2.name}}sAvailable}" SelectedItem="{Binding {{_ent2.name}}, Mode=TwoWay}" ItemDisplayBinding="{Binding Id}" SelectedIndexChanged="Picker{{_ent2.name}}_SelectedIndexChanged"/>
                                <Label Text="{Binding ErrorMessage}" TextColor="Red" FontSize="Medium"/>
                                {{/equal}}{{/equal}}{{/each}}
                            </StackLayout>
                        </ListView.Footer>
                    </ListView>
                </StackLayout>
            </Frame>
            <StackLayout x:Name="Buttons" BackgroundColor="#7970F5" Orientation="Horizontal" HorizontalOptions="FillAndExpand"
                    RelativeLayout.YConstraint="{ConstraintExpression
                        Type=RelativeToParent,
                        Property=Height,
                        Factor=0.91}"
                    RelativeLayout.HeightConstraint="{ConstraintExpression
                        Type=RelativeToParent,
                        Property=Height,
                        Factor=0.2}"
                    RelativeLayout.WidthConstraint="{ConstraintExpression
                        Type=RelativeToParent,
                        Property=Width,
                        Factor=1}">
                <Button Style="{StaticResource editPageButton}" Text="Back To List" Command="{Binding BackCommand}"/>
                <Button Style="{StaticResource editPageButton}" Text="Save" HorizontalOptions="EndAndExpand" Command="{Binding SaveCommand}"/>
            </StackLayout>
        </RelativeLayout>
    </ContentPage.Content>
</ContentPage>